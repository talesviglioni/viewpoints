Environment MyFactory {

	Entity def Station {
		properties {
			Property def ID
		}
		interfaces {
			Interface def signal 
		}
	}

	Entity def PartX {
		properties {
			Property def ID
			Property def location
		}
		interfaces {
			Interface def surface 
		}
	}

	Entity def Supervisory as SupervisorySystem {
		interfaces {
			Interface inNotification as SupervisorySystem.InNotificationToSupervisory 
			Interface outCommand as SupervisorySystem.OutVehicleData 
		}
	}

	Entity def AGV as AGVSystem {
		interfaces {
			Interface def outNotification as AGVSystem.OutNotificationToSupervisory
			Interface def inCommand as AGVSystem.InVehicleData
			Interface def sensor as ArrivalSensor	
			Interface def arm as RobotArm
		}
		properties {
			Property def location
		}
	}

	Interaction def Notify {
		from AGV.outNotification to Supervisory.inNotification
	}
	
	Interaction def Command {
		from Supervisory.outCommand to AGV.inCommand 
	}

	Interaction def Location {
		from Station.signal to AGV.sensor
	}

	Interaction def Atach {
		from AGV.arm to PartX.surface
	}

	Interaction def Detach {
		from AGV.arm to PartX.surface
	}
}

Scenario MoveAndDeliverFromAtoE {

  EnvironmentConfiguration to MyFactory {  

    AGV1:AGV
    AGV2:AGV
 
    StationA:Station    
    StationA.ID = "StationA"
 
    StationB:Station 
    StationB.ID = "StationB"

    StationC:Station 
    StationC.ID = "StationC"

    StationD:Station 
    StationD.ID = "StationD"

    StationE:Station
    StationE.ID = "StationE"

    Supervisor:Supervisory      
  }
   
  Events {
    Event def SupervisoryEvents for Supervisor {
      ON start 						 
        THEN cmdAGV2toC {
          Supervisor.outCommand.destination=StationC
          Supervisor.outCommand.armCommand=idle
          :Command(Supervisor, AGV2) 			
	}
        THEN cmdAGV1toA {				 
          Supervisor.outCommand.destination=StationA
          Supervisor.outCommand.armCommand=idle
          :Command(Supervisor, AGV1) 			
	}
      ON AGV1NotifLoad					 
        THEN cmdAGV1toC {
          Supervisor.outCommand.destination=StationA
          Supervisor.outCommand.armCommand=idle
          :Command(Supervisor, AGV1) 			
	}
      ON AGV1NotifArriveA				  
        THEN cmdAGV1loadA{
          Supervisor.outCommand.destination=StationA
          Supervisor.outCommand.armCommand=load
          :Command(Supervisor, AGV1) 
	}
      ON AGV1NotifArriveC				 
        THEN cmdAGV1UnloadA{
          Supervisor.outCommand.destination=StationA
          Supervisor.outCommand.armCommand=unload
          :Command(Supervisor, AGV1) 
	}
      ON AGV1NotifArriveAUnoaded			  
        THEN cmdAGV2loadC{
          Supervisor.outCommand.destination=StationC
          Supervisor.outCommand.armCommand=load
          :Command(Supervisor, AGV2) 
	}
      ON AGV2NotifLoad					 
        THEN cmdAGV2toE {
          Supervisor.outCommand.destination=StationE
          Supervisor.outCommand.armCommand=idle
          :Command(Supervisor, AGV2) 	
      ON AGV2NotifArriveE				 
        THEN cmdAGV2UnloadE{
          Supervisor.outCommand.destination=StationE
          Supervisor.outCommand.armCommand=unload
          :Command(Supervisor, AGV2) 
	}
	
    }

    Event def AGV1Events for AGV1 {
      ON cmdAGV1toA					 
        THEN AGV1NotifTravelA {
          AGV1.outNotification.notification="traveling"
          :Notify(AGV1, Supervisor)				   
	}
      ON AGV1locationStationB				 
        THEN AGV1NotifPassB {
          AGV1.outNotification.notification="passed"
          :Notify(AGV1, Supervisor)				   
	}
      ON AGV1locationStationC				 
        THEN AGV1NotifArriveC {
          AGV1.outNotification.notification="arrived"
          :Notify(AGV1, Supervisor)				   
	}
      ON AGV1locationStationA									
        THEN AGV1NotifArriveA {				 
          AGV1.outNotification.notification="arrived"
          :Notify(AGV1, Supervisor)				   
	}
      ON AGV1atachPartX					 
        THEN AGV1NotifLoad {
          AGV1.outNotification.notification="loaded"
          :Notify(AGV1, Supervisor)				   
	}
      ON AGV1detachPartX				 
        THEN AGV1NotifArriveAUnoaded {
          AGV1.outNotification.notification="unloaded"
          :Notify(AGV1, Supervisor)				   
	}
      ON AGV2detachPartX				 
        THEN AGV2NotifArriveAUnoaded {
          AGV1.outNotification.notification="unloaded"
          :Notify(AGV2, Supervisor)				   
	}
    }

    Event def AGV2Events for AGV2 {
      ON cmdAGV2toC					 
        THEN AGV2NotifTravelC {
          AGV2.outNotification.notification="traveling"
          :Notify(AGV2, Supervisor)				   
	}    
      ON AGV2locationStationC									
        THEN AGV2NotifArriveC {				 
          AGV2.outNotification.notification="arrived"
          :Notify(AGV2, Supervisor)				   
	}
     ON AGV2atachPartX					 
        THEN AGV2NotifLoad {
          AGV2.outNotification.notification="loaded"
          :Notify(AGV2, Supervisor)				   
	}
      ON AGV2locationStationD				 
        THEN AGV2NotifPassD {
          AGV2.outNotification.notification="passed"
          :Notify(AGV2, Supervisor)				   
	}
      ON AGV2locationStationE				 
        THEN AGV2NotifArriveE {
          AGV2.outNotification.notification="arrived"
          :Notify(AGV2, Supervisor)				   
	}
    }

    Event def StationAEvents for StationA {		 
      ON AGV1.sensor == StationA	
        THEN AGV1locationStationA {
          AGV1.location = Sensor.signal
	}
    }

    Event def StationBEvents for StationB {
      ON AGV1.sensor == StationB	
        THEN AGV1locationStationB {			 
          AGV1.location = Sensor.signal
	}
    }

    Event def StationCEvents for StationC {		 
      ON AGV1.sensor == StationC				
        THEN AGV1locationStationC {
          AGV1.location = Sensor.signal
	}
      ON AGV2.sensor == StationC			 	
        THEN AGV2locationStationC {
          AGV2.location = Sensor.signal
	}
    }

    Event def StationDEvents for StationD {
      ON AGV2.sensor == StationD	
        THEN AGV2locationStationD {			 
          AGV2.location = Sensor.signal
	}
    }

    Event def StationEEvents for StationE {		 
      ON AGV2.sensor == StationE				
        THEN AGV2locationStationE {
          AGV2.location = Sensor.signal
	}

    Event def PartXEvents for Part {
      ON cmdAGV1loadA					 
        THEN AGV1atachPartX {
          AGV1.Atach
	}
      ON cmdAGV1UnloadA					 
        THEN AGV1detachPartX {
          AGV1.Detach
	}
      ON cmdAGV2loadC					 
        THEN AGV2atachPartX {
          AGV2.Atach
	}
      ON cmdAGV2UnloadE					 Example of the new SysADL elements for Environments and Scenarios


        THEN AGV2detachPartX {
          AGV2.Detach
	}
    }
  }
  
  ScenarioExecution {
    AGV1.location = StationC
    AGV2.location = StationD
    Part.location = StationA
    start
  }  
}